name: build deb
on:
  workflow_dispatch:
  release:

jobs:
  build-deb-package:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: indigo
            arch: amd64
            distro: trusty
            label: ubuntu-latest
          - ros_distribution: melodic
            arch: amd64
            distro: bionic
            label: ubuntu-latest
#          - ros_distribution: melodic
#            arch: arm64
#            distro: bionic
#            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: noetic
            arch: amd64
            distro: focal
            label: ubuntu-latest
#          - ros_distribution: noetic
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: foxy
            arch: amd64
            distro: focal
            label: ubuntu-latest
#          - ros_distribution: foxy
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: humble
            arch: amd64
            distro: jammy
            label: ubuntu-latest
#          - ros_distribution: humble
#            arch: arm64
#            distro: jammy
#            label: [ linux-arm-64-8c-32g-300gb ]
          - ros_distribution: jazzy
            arch: amd64
            distro: noble
            label: ubuntu-latest
#          - ros_distribution: jazzy
#            arch: arm64
#            distro: noble
#            label: [ linux-arm-64-8c-32g-300gb ]

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.label }}
    outputs:
      deb_filename: ${{ steps.package_info.outputs.deb_filename }}
    
    steps:
      - name: Checkout code
        if: matrix.ros_distribution != 'indigo' && matrix.ros_distribution != 'melodic'
        uses: actions/checkout@v4

      - name: Checkout code (indigo/melodic)
        if: matrix.ros_distribution == 'indigo' || matrix.ros_distribution == 'melodic'
        shell: bash
        run: |
          echo "current sha: ${{ github.sha}}, current ref: ${{ github.ref }}"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global --add safe.directory $GITHUB_WORKSPACE
          
          git clone https://github.com/${{ github.repository }}.git .
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch
            git checkout pr-branch
          else
            git checkout ${{ github.sha }}
          fi

      - name: Update package version
        if: github.event_name == 'release'
        run: |
          VERSION=$(echo $GITHUB_REF | sed 's#refs/tags/v##')
          echo "Version: $VERSION"
          echo "GITHUB_REF: $GITHUB_REF"
          sed -i "s#<version>.*</version>#<version>$VERSION</version>#" ./package.xml

      - name: Build deb package
        id: build_deb
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            cobridge/ros-${{ matrix.ros_distribution }}:latest \
            bash -c "
              rosdep update --rosdistro=${{ matrix.ros_distribution }} --include-eol-distros &&
              bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }} &&
              DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.arch }} &&
              mkdir -p /workspace/deb-packages &&
              cp ../*.deb /workspace/deb-packages/
            "

      - name: Get package info
        id: package_info
        run: |
          DEB_FILENAME=$(basename $(ls deb-packages/*.deb 2>/dev/null || echo ""))
          echo "deb_filename=$DEB_FILENAME" >> $GITHUB_OUTPUT
          download_url="https://download.coscene.cn/cobridge_test/${DEB_FILENAME}"
          echo "download_url=$download_url" >> $GITHUB_OUTPUT
          echo "File: $DEB_FILENAME, URL: $download_url"

      # 在宿主机上上传artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package_info.outputs.deb_filename || format('ros-{0}-{1}-deb', matrix.ros_distribution, matrix.arch) }}
          path: deb-packages/*.deb
          if-no-files-found: warn
